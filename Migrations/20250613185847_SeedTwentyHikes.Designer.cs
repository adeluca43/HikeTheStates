// <auto-generated />
using System;
using HikingApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HikingApp.Migrations
{
    [DbContext(typeof(HikingAppDbContext))]
    [Migration("20250613185847_SeedTwentyHikes")]
    partial class SeedTwentyHikes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HikingApp.Models.Difficulty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Difficulties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Level = "Easy"
                        },
                        new
                        {
                            Id = 2,
                            Level = "Moderate"
                        },
                        new
                        {
                            Id = 3,
                            Level = "Challenging"
                        },
                        new
                        {
                            Id = 4,
                            Level = "Hard"
                        });
                });

            modelBuilder.Entity("HikingApp.Models.Hike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("integer");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision");

                    b.Property<bool>("HasRestrooms")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDogFriendly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGravel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHandicapAccessible")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsKidFriendly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPaved")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Hikes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 5, 29, 13, 58, 47, 189, DateTimeKind.Local).AddTicks(9052),
                            Description = "Peaceful loop through tall trees.",
                            DifficultyId = 1,
                            Distance = 3.5,
                            HasRestrooms = true,
                            IsDogFriendly = true,
                            IsGravel = true,
                            IsHandicapAccessible = false,
                            IsKidFriendly = true,
                            IsPaved = false,
                            Location = "123 Forest Ln, Nashville, TN 37011",
                            Title = "Forest Loop",
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 5, 24, 13, 58, 47, 189, DateTimeKind.Local).AddTicks(9148),
                            Description = "Trail running alongside the riverbank.",
                            DifficultyId = 2,
                            Distance = 4.2000000000000002,
                            HasRestrooms = false,
                            IsDogFriendly = true,
                            IsGravel = true,
                            IsHandicapAccessible = false,
                            IsKidFriendly = false,
                            IsPaved = false,
                            Location = "456 River Rd, Knoxville, TN 37901",
                            Title = "River Edge Trail",
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 6, 3, 13, 58, 47, 189, DateTimeKind.Local).AddTicks(9152),
                            Description = "Scenic view from the bluff.",
                            DifficultyId = 3,
                            Distance = 5.0999999999999996,
                            HasRestrooms = true,
                            IsDogFriendly = false,
                            IsGravel = false,
                            IsHandicapAccessible = false,
                            IsKidFriendly = false,
                            IsPaved = false,
                            Location = "789 Bluff Dr, Chattanooga, TN 37401",
                            Title = "Bluff Overlook",
                            UserProfileId = 5
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 6, 8, 13, 58, 47, 189, DateTimeKind.Local).AddTicks(9155),
                            Description = "Flat path around the lake, great for families.",
                            DifficultyId = 1,
                            Distance = 2.7999999999999998,
                            HasRestrooms = true,
                            IsDogFriendly = true,
                            IsGravel = false,
                            IsHandicapAccessible = true,
                            IsKidFriendly = true,
                            IsPaved = true,
                            Location = "321 Lakeview Ave, Clarksville, TN 37040",
                            Title = "Lakeside Path",
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2025, 6, 5, 13, 58, 47, 189, DateTimeKind.Local).AddTicks(9158),
                            Description = "Challenging hike with rewarding sunset views.",
                            DifficultyId = 4,
                            Distance = 6.7000000000000002,
                            HasRestrooms = false,
                            IsDogFriendly = false,
                            IsGravel = false,
                            IsHandicapAccessible = false,
                            IsKidFriendly = false,
                            IsPaved = false,
                            Location = "654 Ridge Rd, Cookeville, TN 38501",
                            Title = "Sunset Ridge",
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2025, 6, 10, 13, 58, 47, 189, DateTimeKind.Local).AddTicks(9167),
                            Description = "Short hike to a beautiful waterfall.",
                            DifficultyId = 1,
                            Distance = 1.8999999999999999,
                            HasRestrooms = true,
                            IsDogFriendly = true,
                            IsGravel = true,
                            IsHandicapAccessible = false,
                            IsKidFriendly = true,
                            IsPaved = false,
                            Location = "987 Falls Blvd, Sparta, TN 38583",
                            Title = "Waterfall Trail",
                            UserProfileId = 5
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2025, 5, 19, 13, 58, 47, 189, DateTimeKind.Local).AddTicks(9180),
                            Description = "Steep, rocky trail not for beginners.",
                            DifficultyId = 4,
                            Distance = 5.9000000000000004,
                            HasRestrooms = false,
                            IsDogFriendly = false,
                            IsGravel = false,
                            IsHandicapAccessible = false,
                            IsKidFriendly = false,
                            IsPaved = false,
                            Location = "159 Rock Ln, Tullahoma, TN 37388",
                            Title = "Rocky Path",
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2025, 5, 31, 13, 58, 47, 189, DateTimeKind.Local).AddTicks(9228),
                            Description = "Great spot for birdwatching in spring.",
                            DifficultyId = 2,
                            Distance = 3.2000000000000002,
                            HasRestrooms = true,
                            IsDogFriendly = true,
                            IsGravel = false,
                            IsHandicapAccessible = true,
                            IsKidFriendly = true,
                            IsPaved = true,
                            Location = "753 Birdsong Ct, Columbia, TN 38401",
                            Title = "Birdwatch Loop",
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2025, 5, 27, 13, 58, 47, 189, DateTimeKind.Local).AddTicks(9231),
                            Description = "Quiet trail through pine woods.",
                            DifficultyId = 2,
                            Distance = 4.5,
                            HasRestrooms = false,
                            IsDogFriendly = true,
                            IsGravel = true,
                            IsHandicapAccessible = false,
                            IsKidFriendly = true,
                            IsPaved = false,
                            Location = "111 Pine Ln, Jackson, TN 38301",
                            Title = "Pine Hollow",
                            UserProfileId = 5
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2025, 6, 6, 13, 58, 47, 189, DateTimeKind.Local).AddTicks(9235),
                            Description = "Cross several shallow creeks.",
                            DifficultyId = 3,
                            Distance = 3.7000000000000002,
                            HasRestrooms = false,
                            IsDogFriendly = true,
                            IsGravel = true,
                            IsHandicapAccessible = false,
                            IsKidFriendly = false,
                            IsPaved = false,
                            Location = "222 Creek Rd, Murfreesboro, TN 37130",
                            Title = "Creek Crossing",
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2025, 6, 11, 13, 58, 47, 189, DateTimeKind.Local).AddTicks(9250),
                            Description = "Flat and open with wildflowers.",
                            DifficultyId = 1,
                            Distance = 2.2000000000000002,
                            HasRestrooms = true,
                            IsDogFriendly = true,
                            IsGravel = false,
                            IsHandicapAccessible = true,
                            IsKidFriendly = true,
                            IsPaved = true,
                            Location = "333 Meadow Pkwy, Brentwood, TN 37027",
                            Title = "Meadow Breeze",
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2025, 6, 7, 13, 58, 47, 189, DateTimeKind.Local).AddTicks(9253),
                            Description = "Walk through a shady valley.",
                            DifficultyId = 2,
                            Distance = 3.8999999999999999,
                            HasRestrooms = true,
                            IsDogFriendly = false,
                            IsGravel = true,
                            IsHandicapAccessible = false,
                            IsKidFriendly = true,
                            IsPaved = false,
                            Location = "444 Valley Ln, Gallatin, TN 37066",
                            Title = "Valley Hike",
                            UserProfileId = 5
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(2025, 6, 1, 13, 58, 47, 189, DateTimeKind.Local).AddTicks(9256),
                            Description = "Hard stair climb through the canyon.",
                            DifficultyId = 4,
                            Distance = 4.0,
                            HasRestrooms = true,
                            IsDogFriendly = false,
                            IsGravel = false,
                            IsHandicapAccessible = false,
                            IsKidFriendly = false,
                            IsPaved = false,
                            Location = "555 Step Hill Rd, Johnson City, TN 37601",
                            Title = "Steep Steps",
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 14,
                            DateCreated = new DateTime(2025, 5, 30, 13, 58, 47, 189, DateTimeKind.Local).AddTicks(9259),
                            Description = "Colorful in the fall with maples.",
                            DifficultyId = 2,
                            Distance = 3.2999999999999998,
                            HasRestrooms = false,
                            IsDogFriendly = true,
                            IsGravel = true,
                            IsHandicapAccessible = false,
                            IsKidFriendly = true,
                            IsPaved = false,
                            Location = "666 Maple St, Lebanon, TN 37087",
                            Title = "Maple Grove",
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 15,
                            DateCreated = new DateTime(2025, 6, 2, 13, 58, 47, 189, DateTimeKind.Local).AddTicks(9262),
                            Description = "Open climb with big views.",
                            DifficultyId = 3,
                            Distance = 6.0,
                            HasRestrooms = true,
                            IsDogFriendly = false,
                            IsGravel = false,
                            IsHandicapAccessible = false,
                            IsKidFriendly = false,
                            IsPaved = false,
                            Location = "777 Hilltop Dr, Dickson, TN 37055",
                            Title = "Big Hill",
                            UserProfileId = 5
                        },
                        new
                        {
                            Id = 16,
                            DateCreated = new DateTime(2025, 5, 26, 13, 58, 47, 189, DateTimeKind.Local).AddTicks(9282),
                            Description = "Cooling shade and shallow water.",
                            DifficultyId = 1,
                            Distance = 2.6000000000000001,
                            HasRestrooms = true,
                            IsDogFriendly = true,
                            IsGravel = true,
                            IsHandicapAccessible = true,
                            IsKidFriendly = true,
                            IsPaved = false,
                            Location = "888 Shady Trl, McMinnville, TN 37110",
                            Title = "Shady Creek",
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 17,
                            DateCreated = new DateTime(2025, 5, 25, 13, 58, 47, 189, DateTimeKind.Local).AddTicks(9285),
                            Description = "Passes Civil War sites.",
                            DifficultyId = 2,
                            Distance = 3.7999999999999998,
                            HasRestrooms = true,
                            IsDogFriendly = false,
                            IsGravel = false,
                            IsHandicapAccessible = false,
                            IsKidFriendly = true,
                            IsPaved = true,
                            Location = "999 Heritage Way, Franklin, TN 37064",
                            Title = "Historic Trail",
                            UserProfileId = 4
                        },
                        new
                        {
                            Id = 18,
                            DateCreated = new DateTime(2025, 6, 9, 13, 58, 47, 189, DateTimeKind.Local).AddTicks(9288),
                            Description = "Best at dawn, steep but short.",
                            DifficultyId = 3,
                            Distance = 2.3999999999999999,
                            HasRestrooms = false,
                            IsDogFriendly = false,
                            IsGravel = true,
                            IsHandicapAccessible = false,
                            IsKidFriendly = false,
                            IsPaved = false,
                            Location = "1010 Dawn Dr, Oak Ridge, TN 37830",
                            Title = "Sunrise Summit",
                            UserProfileId = 5
                        },
                        new
                        {
                            Id = 19,
                            DateCreated = new DateTime(2025, 6, 12, 13, 58, 47, 189, DateTimeKind.Local).AddTicks(9291),
                            Description = "Educational signs along the path.",
                            DifficultyId = 1,
                            Distance = 2.0,
                            HasRestrooms = true,
                            IsDogFriendly = true,
                            IsGravel = false,
                            IsHandicapAccessible = true,
                            IsKidFriendly = true,
                            IsPaved = true,
                            Location = "1111 Nature Ln, Smyrna, TN 37167",
                            Title = "Nature Walk",
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 20,
                            DateCreated = new DateTime(2025, 6, 4, 13, 58, 47, 189, DateTimeKind.Local).AddTicks(9295),
                            Description = "Breezy and open, moderate challenge.",
                            DifficultyId = 3,
                            Distance = 5.4000000000000004,
                            HasRestrooms = false,
                            IsDogFriendly = true,
                            IsGravel = true,
                            IsHandicapAccessible = false,
                            IsKidFriendly = false,
                            IsPaved = false,
                            Location = "1212 Ridgecrest Rd, Spring Hill, TN 37174",
                            Title = "Windy Ridge",
                            UserProfileId = 4
                        });
                });

            modelBuilder.Entity("HikingApp.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageLocation")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@hiking.com",
                            FirstName = "Admin",
                            IdentityUserId = "1a111111-1111-1111-1111-111111111111",
                            ImageLocation = "https://i.pravatar.cc/150?img=47",
                            LastName = "Hiker"
                        },
                        new
                        {
                            Id = 2,
                            Email = "user@hiking.com",
                            FirstName = "Standard",
                            IdentityUserId = "2b222222-2222-2222-2222-222222222222",
                            ImageLocation = "https://i.pravatar.cc/150?img=12",
                            LastName = "User"
                        },
                        new
                        {
                            Id = 3,
                            Email = "sarah@email.com",
                            FirstName = "Sarah",
                            IdentityUserId = "3c333333-3333-3333-3333-333333333333",
                            ImageLocation = "https://i.pravatar.cc/150?img=32",
                            LastName = "Woods"
                        },
                        new
                        {
                            Id = 4,
                            Email = "josh@email.com",
                            FirstName = "Josh",
                            IdentityUserId = "4d444444-4444-4444-4444-444444444444",
                            ImageLocation = "https://i.pravatar.cc/150?img=26",
                            LastName = "Trail"
                        },
                        new
                        {
                            Id = 5,
                            Email = "amber@email.com",
                            FirstName = "Amber",
                            IdentityUserId = "5e555555-5555-5555-5555-555555555555",
                            ImageLocation = "https://i.pravatar.cc/150?img=45",
                            LastName = "Creek"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "role-admin-0001",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1a111111-1111-1111-1111-111111111111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "377383f9-ca14-452a-8847-39601f5ba164",
                            Email = "admin@hiking.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HIKING.COM",
                            NormalizedUserName = "ADMIN@HIKING.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC6tO76VuJwgmFouzPq+FfI51OrQl+WMDvstrGrMnom8DCi4j48qgCW/kVydt1n6gA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa7c15d2-b7e1-4e06-a099-f9838b7d9b27",
                            TwoFactorEnabled = false,
                            UserName = "admin@hiking.com"
                        },
                        new
                        {
                            Id = "2b222222-2222-2222-2222-222222222222",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a28233c-0f81-4110-9ebb-29d92bbe2ffc",
                            Email = "user@hiking.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@HIKING.COM",
                            NormalizedUserName = "USER@HIKING.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEqU119Z7GEl9T2WENVVhEDedmGyrCpv2Pi51hR20VAGrY43MgYh6wEaqDhiWiWMww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a4b4d791-f64e-4265-8fc1-5d52af938053",
                            TwoFactorEnabled = false,
                            UserName = "user@hiking.com"
                        },
                        new
                        {
                            Id = "3c333333-3333-3333-3333-333333333333",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9214327a-70c6-4c4d-ac5c-bb7540fa52da",
                            Email = "sarah@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SARAH@EMAIL.COM",
                            NormalizedUserName = "SARAH@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJIEEQlS3AqkdkytkONVeMGMSglLZe7/7KutPzRKKjEslnmROOaXIFjQvxK3YYW7NQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a18f1328-13e6-4783-ac12-f7c993569f9e",
                            TwoFactorEnabled = false,
                            UserName = "sarah@email.com"
                        },
                        new
                        {
                            Id = "4d444444-4444-4444-4444-444444444444",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8b3dbe9-632b-417a-8acb-d4010061b689",
                            Email = "josh@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOSH@EMAIL.COM",
                            NormalizedUserName = "JOSH@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA09jVXBHhgYWrw1gKK7RgnynTl4HgBN4pJhdC1CJ6Sls+r6sqhv92ufO8ngFiB35g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a01c65d-238e-4aa6-9da8-1b9785d17159",
                            TwoFactorEnabled = false,
                            UserName = "josh@email.com"
                        },
                        new
                        {
                            Id = "5e555555-5555-5555-5555-555555555555",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f64a627-4b23-4e1b-8f17-28a2d7a713e2",
                            Email = "amber@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AMBER@EMAIL.COM",
                            NormalizedUserName = "AMBER@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBU+uPDTrO8quala3fa9X1zfKtV/E2JJLxWYyOlRf2xiuEZcwTYuLUo6Zgwort233w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d40f4133-7505-44ad-9cd4-602b9481eed2",
                            TwoFactorEnabled = false,
                            UserName = "amber@email.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1a111111-1111-1111-1111-111111111111",
                            RoleId = "role-admin-0001"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HikingApp.Models.Hike", b =>
                {
                    b.HasOne("HikingApp.Models.Difficulty", "Difficulty")
                        .WithMany("Hikes")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikingApp.Models.UserProfile", "UserProfile")
                        .WithMany("Hikes")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HikingApp.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HikingApp.Models.Difficulty", b =>
                {
                    b.Navigation("Hikes");
                });

            modelBuilder.Entity("HikingApp.Models.UserProfile", b =>
                {
                    b.Navigation("Hikes");
                });
#pragma warning restore 612, 618
        }
    }
}
