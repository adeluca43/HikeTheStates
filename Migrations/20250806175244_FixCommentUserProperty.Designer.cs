// <auto-generated />
using System;
using HikingApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HikingApp.Migrations
{
    [DbContext(typeof(HikingAppDbContext))]
    [Migration("20250806175244_FixCommentUserProperty")]
    partial class FixCommentUserProperty
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateFavorited")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("HikeId")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HikeId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("HikingApp.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("HikeId")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HikeId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("HikingApp.Models.Difficulty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Difficulties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Level = "Easy"
                        },
                        new
                        {
                            Id = 2,
                            Level = "Moderate"
                        },
                        new
                        {
                            Id = 3,
                            Level = "Challenging"
                        },
                        new
                        {
                            Id = 4,
                            Level = "Hard"
                        });
                });

            modelBuilder.Entity("HikingApp.Models.Hike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("integer");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision");

                    b.Property<bool>("HasRestrooms")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDogFriendly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGravel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHandicapAccessible")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsKidFriendly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPaved")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Hikes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressLine1 = "123 Forest Ln",
                            City = "Nashville",
                            DateCreated = new DateTime(2025, 8, 5, 12, 52, 44, 184, DateTimeKind.Local).AddTicks(4949),
                            Description = "Peaceful loop through tall trees",
                            DifficultyId = 1,
                            Distance = 1.8,
                            HasRestrooms = false,
                            IsDogFriendly = true,
                            IsGravel = false,
                            IsHandicapAccessible = true,
                            IsKidFriendly = false,
                            IsPaved = true,
                            Latitude = 0.0,
                            Longitude = 0.0,
                            State = "TN",
                            Title = "Forest Loop",
                            UserProfileId = 3,
                            Zip = "37011"
                        },
                        new
                        {
                            Id = 2,
                            AddressLine1 = "456 River Rd",
                            City = "Knoxville",
                            DateCreated = new DateTime(2025, 8, 4, 12, 52, 44, 184, DateTimeKind.Local).AddTicks(5047),
                            Description = "Trail running alongside the riverbank.",
                            DifficultyId = 2,
                            Distance = 2.7000000000000002,
                            HasRestrooms = true,
                            IsDogFriendly = false,
                            IsGravel = true,
                            IsHandicapAccessible = false,
                            IsKidFriendly = true,
                            IsPaved = false,
                            Latitude = 0.0,
                            Longitude = 0.0,
                            State = "TN",
                            Title = "River Edge Trail",
                            UserProfileId = 4,
                            Zip = "37901"
                        },
                        new
                        {
                            Id = 3,
                            AddressLine1 = "789 Bluff Dr",
                            City = "Chattanooga",
                            DateCreated = new DateTime(2025, 8, 3, 12, 52, 44, 184, DateTimeKind.Local).AddTicks(5050),
                            Description = "Scenic view from the bluff",
                            DifficultyId = 3,
                            Distance = 3.6000000000000001,
                            HasRestrooms = true,
                            IsDogFriendly = true,
                            IsGravel = false,
                            IsHandicapAccessible = false,
                            IsKidFriendly = true,
                            IsPaved = false,
                            Latitude = 0.0,
                            Longitude = 0.0,
                            State = "TN",
                            Title = "Bluff Overlook",
                            UserProfileId = 5,
                            Zip = "37401"
                        },
                        new
                        {
                            Id = 4,
                            AddressLine1 = "321 Lakeview Ave",
                            City = "Clarksville",
                            DateCreated = new DateTime(2025, 8, 2, 12, 52, 44, 184, DateTimeKind.Local).AddTicks(5053),
                            Description = "Goes all the way around the lake!Lots of ducks!",
                            DifficultyId = 4,
                            Distance = 4.5,
                            HasRestrooms = true,
                            IsDogFriendly = false,
                            IsGravel = true,
                            IsHandicapAccessible = false,
                            IsKidFriendly = false,
                            IsPaved = true,
                            Latitude = 0.0,
                            Longitude = 0.0,
                            State = "TN",
                            Title = "Lakeside Path",
                            UserProfileId = 3,
                            Zip = "37040"
                        },
                        new
                        {
                            Id = 5,
                            AddressLine1 = "654 Ridge Rd",
                            City = "Cookeville",
                            DateCreated = new DateTime(2025, 8, 1, 12, 52, 44, 184, DateTimeKind.Local).AddTicks(5056),
                            Description = "Challenging hike with rewarding sunset views.",
                            DifficultyId = 1,
                            Distance = 5.4000000000000004,
                            HasRestrooms = true,
                            IsDogFriendly = true,
                            IsGravel = false,
                            IsHandicapAccessible = true,
                            IsKidFriendly = true,
                            IsPaved = false,
                            Latitude = 0.0,
                            Longitude = 0.0,
                            State = "TN",
                            Title = "Sunset Ridge",
                            UserProfileId = 4,
                            Zip = "38501"
                        },
                        new
                        {
                            Id = 6,
                            AddressLine1 = "987 Falls Blvd",
                            City = "Sparta",
                            DateCreated = new DateTime(2025, 7, 31, 12, 52, 44, 184, DateTimeKind.Local).AddTicks(5063),
                            Description = "steep, rocky trail, not for beginners.",
                            DifficultyId = 2,
                            Distance = 2.7000000000000002,
                            HasRestrooms = true,
                            IsDogFriendly = false,
                            IsGravel = true,
                            IsHandicapAccessible = false,
                            IsKidFriendly = true,
                            IsPaved = false,
                            Latitude = 0.0,
                            Longitude = 0.0,
                            State = "TN",
                            Title = "Waterfall Trail",
                            UserProfileId = 5,
                            Zip = "38583"
                        },
                        new
                        {
                            Id = 7,
                            AddressLine1 = "159 Rock Ln",
                            City = "Tullahoma",
                            DateCreated = new DateTime(2025, 7, 30, 12, 52, 44, 184, DateTimeKind.Local).AddTicks(5081),
                            Description = "Lots of rocks and boulders on this trail",
                            DifficultyId = 3,
                            Distance = 3.6000000000000001,
                            HasRestrooms = false,
                            IsDogFriendly = true,
                            IsGravel = false,
                            IsHandicapAccessible = false,
                            IsKidFriendly = false,
                            IsPaved = false,
                            Latitude = 0.0,
                            Longitude = 0.0,
                            State = "TN",
                            Title = "Rocky Path",
                            UserProfileId = 3,
                            Zip = "37388"
                        },
                        new
                        {
                            Id = 8,
                            AddressLine1 = "753 Birdsong Ct",
                            City = "Columbia",
                            DateCreated = new DateTime(2025, 7, 29, 12, 52, 44, 184, DateTimeKind.Local).AddTicks(5084),
                            Description = "Great nature watching along the trail, lots of birds.",
                            DifficultyId = 4,
                            Distance = 4.5,
                            HasRestrooms = false,
                            IsDogFriendly = true,
                            IsGravel = true,
                            IsHandicapAccessible = false,
                            IsKidFriendly = true,
                            IsPaved = false,
                            Latitude = 0.0,
                            Longitude = 0.0,
                            State = "TN",
                            Title = "Birdwatch Loop",
                            UserProfileId = 4,
                            Zip = "38401"
                        },
                        new
                        {
                            Id = 9,
                            AddressLine1 = "111 Pine Ln",
                            City = "Jackson",
                            DateCreated = new DateTime(2025, 7, 28, 12, 52, 44, 184, DateTimeKind.Local).AddTicks(5087),
                            Description = "short path, great for kids, can be muddy.",
                            DifficultyId = 1,
                            Distance = 1.8,
                            HasRestrooms = false,
                            IsDogFriendly = false,
                            IsGravel = false,
                            IsHandicapAccessible = false,
                            IsKidFriendly = true,
                            IsPaved = false,
                            Latitude = 0.0,
                            Longitude = 0.0,
                            State = "TN",
                            Title = "Pine Hollow",
                            UserProfileId = 5,
                            Zip = "38301"
                        },
                        new
                        {
                            Id = 10,
                            AddressLine1 = "222 Creek Rd",
                            City = "Murfreesboro",
                            DateCreated = new DateTime(2025, 7, 27, 12, 52, 44, 184, DateTimeKind.Local).AddTicks(5089),
                            Description = "multiple creek crossings on path, water comes up to knee height.",
                            DifficultyId = 2,
                            Distance = 2.7000000000000002,
                            HasRestrooms = false,
                            IsDogFriendly = true,
                            IsGravel = true,
                            IsHandicapAccessible = false,
                            IsKidFriendly = false,
                            IsPaved = false,
                            Latitude = 0.0,
                            Longitude = 0.0,
                            State = "TN",
                            Title = "Creek Crossing",
                            UserProfileId = 3,
                            Zip = "37130"
                        },
                        new
                        {
                            Id = 11,
                            AddressLine1 = "333 Meadow Pkwy",
                            City = "Brentwood",
                            DateCreated = new DateTime(2025, 7, 26, 12, 52, 44, 184, DateTimeKind.Local).AddTicks(5100),
                            Description = "Beautiful views of wild flowers!",
                            DifficultyId = 3,
                            Distance = 3.6000000000000001,
                            HasRestrooms = true,
                            IsDogFriendly = true,
                            IsGravel = false,
                            IsHandicapAccessible = false,
                            IsKidFriendly = true,
                            IsPaved = false,
                            Latitude = 0.0,
                            Longitude = 0.0,
                            State = "TN",
                            Title = "Meadow Breeze",
                            UserProfileId = 4,
                            Zip = "37027"
                        },
                        new
                        {
                            Id = 12,
                            AddressLine1 = "444 Valley Ln",
                            City = "Gallatin",
                            DateCreated = new DateTime(2025, 7, 25, 12, 52, 44, 184, DateTimeKind.Local).AddTicks(5102),
                            Description = "Steep hills, not very busy early in the morning.",
                            DifficultyId = 4,
                            Distance = 4.5,
                            HasRestrooms = true,
                            IsDogFriendly = false,
                            IsGravel = true,
                            IsHandicapAccessible = false,
                            IsKidFriendly = true,
                            IsPaved = false,
                            Latitude = 0.0,
                            Longitude = 0.0,
                            State = "TN",
                            Title = "Valley Hike",
                            UserProfileId = 5,
                            Zip = "37066"
                        },
                        new
                        {
                            Id = 13,
                            AddressLine1 = "555 Step Hill Rd",
                            City = "Johnson City",
                            DateCreated = new DateTime(2025, 7, 24, 12, 52, 44, 184, DateTimeKind.Local).AddTicks(5105),
                            Description = "Trail has tons of steps!!",
                            DifficultyId = 1,
                            Distance = 1.8,
                            HasRestrooms = false,
                            IsDogFriendly = true,
                            IsGravel = false,
                            IsHandicapAccessible = true,
                            IsKidFriendly = false,
                            IsPaved = true,
                            Latitude = 0.0,
                            Longitude = 0.0,
                            State = "TN",
                            Title = "Steep Steps",
                            UserProfileId = 3,
                            Zip = "37601"
                        },
                        new
                        {
                            Id = 14,
                            AddressLine1 = "666 Maple St",
                            City = "Lebanon",
                            DateCreated = new DateTime(2025, 7, 23, 12, 52, 44, 184, DateTimeKind.Local).AddTicks(5108),
                            Description = "big trees, lots of shade, great for a day hike!",
                            DifficultyId = 2,
                            Distance = 2.7000000000000002,
                            HasRestrooms = true,
                            IsDogFriendly = false,
                            IsGravel = true,
                            IsHandicapAccessible = false,
                            IsKidFriendly = true,
                            IsPaved = false,
                            Latitude = 0.0,
                            Longitude = 0.0,
                            State = "TN",
                            Title = "Maple Grove",
                            UserProfileId = 4,
                            Zip = "37087"
                        },
                        new
                        {
                            Id = 15,
                            AddressLine1 = "777 Hilltop Dr",
                            City = "Dickson",
                            DateCreated = new DateTime(2025, 7, 22, 12, 52, 44, 184, DateTimeKind.Local).AddTicks(5111),
                            Description = "Open climb with big views",
                            DifficultyId = 3,
                            Distance = 3.6000000000000001,
                            HasRestrooms = false,
                            IsDogFriendly = true,
                            IsGravel = false,
                            IsHandicapAccessible = false,
                            IsKidFriendly = false,
                            IsPaved = false,
                            Latitude = 0.0,
                            Longitude = 0.0,
                            State = "TN",
                            Title = "Big Hill",
                            UserProfileId = 5,
                            Zip = "37055"
                        },
                        new
                        {
                            Id = 16,
                            AddressLine1 = "888 Shady Trl",
                            City = "McMinnville",
                            DateCreated = new DateTime(2025, 7, 21, 12, 52, 44, 184, DateTimeKind.Local).AddTicks(5128),
                            Description = "Cooling shade and shallow water.",
                            DifficultyId = 4,
                            Distance = 4.5,
                            HasRestrooms = false,
                            IsDogFriendly = false,
                            IsGravel = true,
                            IsHandicapAccessible = false,
                            IsKidFriendly = true,
                            IsPaved = false,
                            Latitude = 0.0,
                            Longitude = 0.0,
                            State = "TN",
                            Title = "Shady Creek",
                            UserProfileId = 3,
                            Zip = "37110"
                        },
                        new
                        {
                            Id = 17,
                            AddressLine1 = "999 Heritage Way",
                            City = "Franklin",
                            DateCreated = new DateTime(2025, 7, 20, 12, 52, 44, 184, DateTimeKind.Local).AddTicks(5131),
                            Description = "Passes Civil War Sites",
                            DifficultyId = 1,
                            Distance = 1.8,
                            HasRestrooms = false,
                            IsDogFriendly = true,
                            IsGravel = false,
                            IsHandicapAccessible = true,
                            IsKidFriendly = false,
                            IsPaved = true,
                            Latitude = 0.0,
                            Longitude = 0.0,
                            State = "TN",
                            Title = "Historic Trail",
                            UserProfileId = 4,
                            Zip = "37064"
                        },
                        new
                        {
                            Id = 18,
                            AddressLine1 = "1010 Dawn Dr",
                            City = "Oak Ridge",
                            DateCreated = new DateTime(2025, 7, 19, 12, 52, 44, 184, DateTimeKind.Local).AddTicks(5134),
                            Description = "Best at dawn, steep but short.",
                            DifficultyId = 2,
                            Distance = 2.7000000000000002,
                            HasRestrooms = true,
                            IsDogFriendly = false,
                            IsGravel = true,
                            IsHandicapAccessible = false,
                            IsKidFriendly = true,
                            IsPaved = false,
                            Latitude = 0.0,
                            Longitude = 0.0,
                            State = "TN",
                            Title = "Sunrise Summit",
                            UserProfileId = 5,
                            Zip = "37830"
                        },
                        new
                        {
                            Id = 19,
                            AddressLine1 = "1111 Nature Ln",
                            City = "Smyrna",
                            DateCreated = new DateTime(2025, 7, 18, 12, 52, 44, 184, DateTimeKind.Local).AddTicks(5139),
                            Description = "Educational signs along the way.",
                            DifficultyId = 3,
                            Distance = 3.6000000000000001,
                            HasRestrooms = true,
                            IsDogFriendly = true,
                            IsGravel = false,
                            IsHandicapAccessible = false,
                            IsKidFriendly = true,
                            IsPaved = false,
                            Latitude = 0.0,
                            Longitude = 0.0,
                            State = "TN",
                            Title = "Nature Walk",
                            UserProfileId = 3,
                            Zip = "37167"
                        },
                        new
                        {
                            Id = 20,
                            AddressLine1 = "1212 Ridgecrest Rd",
                            City = "Spring Hill",
                            DateCreated = new DateTime(2025, 7, 17, 12, 52, 44, 184, DateTimeKind.Local).AddTicks(5141),
                            Description = "Breezy and open, moderate challenge",
                            DifficultyId = 4,
                            Distance = 4.5,
                            HasRestrooms = true,
                            IsDogFriendly = false,
                            IsGravel = true,
                            IsHandicapAccessible = false,
                            IsKidFriendly = true,
                            IsPaved = false,
                            Latitude = 0.0,
                            Longitude = 0.0,
                            State = "TN",
                            Title = "Windy Ridge",
                            UserProfileId = 4,
                            Zip = "37174"
                        });
                });

            modelBuilder.Entity("HikingApp.Models.HikeLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HikeId")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HikeId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("HikeLikes");
                });

            modelBuilder.Entity("HikingApp.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageLocation")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@hiking.com",
                            FirstName = "Admin",
                            IdentityUserId = "1a111111-1111-1111-1111-111111111111",
                            ImageLocation = "https://i.pravatar.cc/150?img=47",
                            LastName = "Hiker"
                        },
                        new
                        {
                            Id = 2,
                            Email = "user@hiking.com",
                            FirstName = "Standard",
                            IdentityUserId = "2b222222-2222-2222-2222-222222222222",
                            ImageLocation = "https://i.pravatar.cc/150?img=12",
                            LastName = "User"
                        },
                        new
                        {
                            Id = 3,
                            Email = "sarah@email.com",
                            FirstName = "Sarah",
                            IdentityUserId = "3c333333-3333-3333-3333-333333333333",
                            ImageLocation = "https://i.pravatar.cc/150?img=32",
                            LastName = "Woods"
                        },
                        new
                        {
                            Id = 4,
                            Email = "josh@email.com",
                            FirstName = "Josh",
                            IdentityUserId = "4d444444-4444-4444-4444-444444444444",
                            ImageLocation = "https://i.pravatar.cc/150?img=26",
                            LastName = "Trail"
                        },
                        new
                        {
                            Id = 5,
                            Email = "amber@email.com",
                            FirstName = "Amber",
                            IdentityUserId = "5e555555-5555-5555-5555-555555555555",
                            ImageLocation = "https://i.pravatar.cc/150?img=45",
                            LastName = "Creek"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "role-admin-0001",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1a111111-1111-1111-1111-111111111111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c36aea2b-2052-4788-b403-e469775a0d1a",
                            Email = "admin@hiking.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HIKING.COM",
                            NormalizedUserName = "ADMIN@HIKING.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO5E0lUDcU7496VQH1sGvAdrT6X3zEknWdJGbfxLl9mTqxjrtvPRbUd6OHWJg/TFTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c7d7771e-7f3e-41a2-9987-34f7c556513d",
                            TwoFactorEnabled = false,
                            UserName = "admin@hiking.com"
                        },
                        new
                        {
                            Id = "2b222222-2222-2222-2222-222222222222",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e9f6ec3a-799a-44e9-b367-f2dc9008bfe5",
                            Email = "user@hiking.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@HIKING.COM",
                            NormalizedUserName = "USER@HIKING.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFzadljRqqLLY+ZCiWHfm0+ajR4iQBegBNfGlyJ25RWhC7aPBrZFb8lijT/c77b4HQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e897781f-2d97-4040-a759-63a916b7ad8a",
                            TwoFactorEnabled = false,
                            UserName = "user@hiking.com"
                        },
                        new
                        {
                            Id = "3c333333-3333-3333-3333-333333333333",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1845a358-ee53-4e48-b8df-dc700e0e9630",
                            Email = "sarah@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SARAH@EMAIL.COM",
                            NormalizedUserName = "SARAH@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJHJGgG3ZDiGdwzsuyvxWXRm98cnP/kMBAO3QEnhalroJH8/LYUBME0Y2FQN/yvI1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9ae8c9c7-ad1f-400f-bf90-7649509ccefc",
                            TwoFactorEnabled = false,
                            UserName = "sarah@email.com"
                        },
                        new
                        {
                            Id = "4d444444-4444-4444-4444-444444444444",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90246f70-0046-4c43-b494-05dd644fad82",
                            Email = "josh@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOSH@EMAIL.COM",
                            NormalizedUserName = "JOSH@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKwuDw19LWyxojToELvgbATetIUKM6GeiSAa2suuynvBS6sstZ3nZ8pAUQoDdz4igw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ba99aa5-ac19-445c-8b06-4feb7bc24e8f",
                            TwoFactorEnabled = false,
                            UserName = "josh@email.com"
                        },
                        new
                        {
                            Id = "5e555555-5555-5555-5555-555555555555",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2cf4dce-8ca1-446c-b5c8-d140192c8a56",
                            Email = "amber@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AMBER@EMAIL.COM",
                            NormalizedUserName = "AMBER@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMixQ7iAQscsnkbuoHWNLaKh8m9abSb5RqiOvfjveSXIneHPlnxT580JhQcC4iz4Ng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a26e1d74-b568-472b-bf3f-d3dc563f0b50",
                            TwoFactorEnabled = false,
                            UserName = "amber@email.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1a111111-1111-1111-1111-111111111111",
                            RoleId = "role-admin-0001"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Favorite", b =>
                {
                    b.HasOne("HikingApp.Models.Hike", "Hike")
                        .WithMany()
                        .HasForeignKey("HikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikingApp.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hike");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HikingApp.Models.Comment", b =>
                {
                    b.HasOne("HikingApp.Models.Hike", "Hike")
                        .WithMany()
                        .HasForeignKey("HikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikingApp.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hike");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HikingApp.Models.Hike", b =>
                {
                    b.HasOne("HikingApp.Models.Difficulty", "Difficulty")
                        .WithMany("Hikes")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikingApp.Models.UserProfile", "UserProfile")
                        .WithMany("Hikes")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HikingApp.Models.HikeLike", b =>
                {
                    b.HasOne("HikingApp.Models.Hike", "Hike")
                        .WithMany()
                        .HasForeignKey("HikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikingApp.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hike");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HikingApp.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HikingApp.Models.Difficulty", b =>
                {
                    b.Navigation("Hikes");
                });

            modelBuilder.Entity("HikingApp.Models.UserProfile", b =>
                {
                    b.Navigation("Hikes");
                });
#pragma warning restore 612, 618
        }
    }
}
