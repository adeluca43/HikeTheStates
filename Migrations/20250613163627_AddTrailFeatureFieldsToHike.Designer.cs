// <auto-generated />
using System;
using HikingApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HikingApp.Migrations
{
    [DbContext(typeof(HikingAppDbContext))]
    [Migration("20250613163627_AddTrailFeatureFieldsToHike")]
    partial class AddTrailFeatureFieldsToHike
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HikingApp.Models.Difficulty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Difficulties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Level = "Easy"
                        },
                        new
                        {
                            Id = 2,
                            Level = "Moderate"
                        },
                        new
                        {
                            Id = 3,
                            Level = "Challenging"
                        },
                        new
                        {
                            Id = 4,
                            Level = "Hard"
                        });
                });

            modelBuilder.Entity("HikingApp.Models.Hike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("integer");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision");

                    b.Property<bool>("HasRestrooms")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDogFriendly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGravel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHandicapAccessible")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsKidFriendly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPaved")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Hikes");
                });

            modelBuilder.Entity("HikingApp.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageLocation")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@hiking.com",
                            FirstName = "Admin",
                            IdentityUserId = "1a111111-1111-1111-1111-111111111111",
                            ImageLocation = "https://i.pravatar.cc/150?img=47",
                            LastName = "Hiker"
                        },
                        new
                        {
                            Id = 2,
                            Email = "user@hiking.com",
                            FirstName = "Standard",
                            IdentityUserId = "2b222222-2222-2222-2222-222222222222",
                            ImageLocation = "https://i.pravatar.cc/150?img=12",
                            LastName = "User"
                        },
                        new
                        {
                            Id = 3,
                            Email = "sarah@email.com",
                            FirstName = "Sarah",
                            IdentityUserId = "3c333333-3333-3333-3333-333333333333",
                            ImageLocation = "https://i.pravatar.cc/150?img=32",
                            LastName = "Woods"
                        },
                        new
                        {
                            Id = 4,
                            Email = "josh@email.com",
                            FirstName = "Josh",
                            IdentityUserId = "4d444444-4444-4444-4444-444444444444",
                            ImageLocation = "https://i.pravatar.cc/150?img=26",
                            LastName = "Trail"
                        },
                        new
                        {
                            Id = 5,
                            Email = "amber@email.com",
                            FirstName = "Amber",
                            IdentityUserId = "5e555555-5555-5555-5555-555555555555",
                            ImageLocation = "https://i.pravatar.cc/150?img=45",
                            LastName = "Creek"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "role-admin-0001",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1a111111-1111-1111-1111-111111111111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0a849e6a-89b8-4ba0-9ac9-53726a4f0cc5",
                            Email = "admin@hiking.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HIKING.COM",
                            NormalizedUserName = "ADMIN@HIKING.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECV267GiCWY9RHmG1v6u9snmkTzhOcjztt00aF7MBJ9nkAHcrlYw7LaWkRgjbQFKfA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0da9bf07-1908-49fa-9f0b-68349862d567",
                            TwoFactorEnabled = false,
                            UserName = "admin@hiking.com"
                        },
                        new
                        {
                            Id = "2b222222-2222-2222-2222-222222222222",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "27c58eb8-efc2-4fba-ab77-f0d36af74cf4",
                            Email = "user@hiking.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@HIKING.COM",
                            NormalizedUserName = "USER@HIKING.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOdL7OMACk5Iwdn1vv3qmoShBPuViBcNPTVYNLux+tokf6FosxFYdUmEEtGZwmojYQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "277c1720-019c-4ebe-8b9d-641336b531fb",
                            TwoFactorEnabled = false,
                            UserName = "user@hiking.com"
                        },
                        new
                        {
                            Id = "3c333333-3333-3333-3333-333333333333",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ee2730a-dc24-4238-affa-c7801a46edca",
                            Email = "sarah@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SARAH@EMAIL.COM",
                            NormalizedUserName = "SARAH@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI8yCRjJVA2m13s0T4r+jlTeoY8zetFLTY2Wzxtk5a04ddKxGtNpgLXsXFKxhHpLQQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fb3bf452-49e5-41ec-affc-4837205b1f8f",
                            TwoFactorEnabled = false,
                            UserName = "sarah@email.com"
                        },
                        new
                        {
                            Id = "4d444444-4444-4444-4444-444444444444",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73b657d9-1b74-45a2-b245-4c907bc2d322",
                            Email = "josh@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOSH@EMAIL.COM",
                            NormalizedUserName = "JOSH@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDdZ70ilgCX/nuUTsfjhafDtm+OZz8g19PYlyz7ONAxyfg3/OdzG8d5RV8RHNcp1Wg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f9cd5d1-67bc-4bcc-b59e-0bc837e19956",
                            TwoFactorEnabled = false,
                            UserName = "josh@email.com"
                        },
                        new
                        {
                            Id = "5e555555-5555-5555-5555-555555555555",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30634618-f93d-421b-8ba8-e5618faad221",
                            Email = "amber@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AMBER@EMAIL.COM",
                            NormalizedUserName = "AMBER@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDvoW0ZxR2Fh670xxmFdKr6dkPYrFbQpxG3C6OaDQzP7/A6MT37of06N+P6aK1XV2w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "032fe07e-d24c-46ce-bb8f-ebcc88aa967a",
                            TwoFactorEnabled = false,
                            UserName = "amber@email.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1a111111-1111-1111-1111-111111111111",
                            RoleId = "role-admin-0001"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HikingApp.Models.Hike", b =>
                {
                    b.HasOne("HikingApp.Models.Difficulty", "Difficulty")
                        .WithMany("Hikes")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikingApp.Models.UserProfile", "UserProfile")
                        .WithMany("Hikes")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HikingApp.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HikingApp.Models.Difficulty", b =>
                {
                    b.Navigation("Hikes");
                });

            modelBuilder.Entity("HikingApp.Models.UserProfile", b =>
                {
                    b.Navigation("Hikes");
                });
#pragma warning restore 612, 618
        }
    }
}
